<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="2.0" xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                xmlns:ns0="http://xmlns.oracle.com/Oil_N_Gas_ISA_Workspace/HSFDataExport/HSFDataExportBPELProcess"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://pradipta.com/hsf/customwebservices/"
                exclude-result-prefixes="xsd xsi oracle-xsl-mapper xsl ns0 tns oraxsl xp20 xref mhdr oraext dvm socket"
                xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype"
                xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"
                xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/">
    <oracle-xsl-mapper:schema>
        <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
        <oracle-xsl-mapper:mapSources>
            <oracle-xsl-mapper:source type="WSDL">
                <oracle-xsl-mapper:schema location="../WSDLs/HSFDataExportBPELProcess.wsdl"/>
                <oracle-xsl-mapper:rootElement name="HSFConnectParameters"
                                               namespace="http://xmlns.oracle.com/Oil_N_Gas_ISA_Workspace/HSFDataExport/HSFDataExportBPELProcess"/>
            </oracle-xsl-mapper:source>
            <oracle-xsl-mapper:source type="WSDL">
                <oracle-xsl-mapper:schema location="../WSDLs/HSFDataExportBPELProcess.wsdl"/>
                <oracle-xsl-mapper:rootElement name="process"
                                               namespace="http://xmlns.oracle.com/Oil_N_Gas_ISA_Workspace/HSFDataExport/HSFDataExportBPELProcess"/>
                <oracle-xsl-mapper:param name="inputVariable.payload"/>
            </oracle-xsl-mapper:source>
        </oracle-xsl-mapper:mapSources>
        <oracle-xsl-mapper:mapTargets>
            <oracle-xsl-mapper:target type="WSDL">
                <oracle-xsl-mapper:schema location="../WSDLs/HSFWebServiceSoap11.wsdl"/>
                <oracle-xsl-mapper:rootElement name="getEntityDataCellsRequest"
                                               namespace="http://pradipta.com/hsf/customwebservices/"/>
            </oracle-xsl-mapper:target>
        </oracle-xsl-mapper:mapTargets>
        <!--GENERATED BY ORACLE XSL MAPPER 12.1.3.0.0(XSLT Build 140529.0700.0211) AT [THU JUL 07 18:44:05 IST 2016].-->
    </oracle-xsl-mapper:schema>
    <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
    <xsl:param name="inputVariable.payload"/>
    <xsl:template match="/">
        <tns:getEntityDataCellsRequest>
            <tns:HSFConnectParameters>
                <tns:hostname>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:hostname"/>
                </tns:hostname>
                <tns:port>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:port"/>
                </tns:port>
                <tns:username>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:username"/>
                </tns:username>
                <tns:password>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:password"/>
                </tns:password>
                <tns:server>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:server"/>
                </tns:server>
                <tns:database>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:database"/>
                </tns:database>
                <tns:entity>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:entity"/>
                </tns:entity>
            </tns:HSFConnectParameters>
            <tns:HSFFetchParameters>
                <tns:measure>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:measure"/>
                </tns:measure>
                <tns:scenario>
                    <xsl:value-of select="/ns0:HSFConnectParameters/ns0:scenario"/>
                </tns:scenario>
                <tns:ListOfTime>
                    <xsl:for-each select="$inputVariable.payload/ns0:process/ns0:ListofTime/ns0:TimeInYear">
                        <xsl:call-template name="GenerateMonths">
                            <xsl:with-param name="timeInString" select="."/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:variable name="timeInString"
                                  select="string(xp20:year-from-dateTime (xp20:current-dateTime ( ) ))"/>
                    <xsl:call-template name="GenerateMonths">
                        <xsl:with-param name="timeInString" select="$timeInString"/>
                    </xsl:call-template>
                    <xsl:variable name="timeInStringNextYear"
                                  select="string(number(xp20:year-from-dateTime (xp20:current-dateTime ( ) )) + 1)"/>
                    <xsl:call-template name="GenerateMonths">
                        <xsl:with-param name="timeInString" select="$timeInStringNextYear"/>
                    </xsl:call-template>
                </tns:ListOfTime>
                <!--tns:ListOfTime>
          <tns:time>
            <xsl:value-of select="xp20:year-from-dateTime (xp20:current-dateTime ( ) )"/>
          </tns:time>
        </tns:ListOfTime-->
                <tns:ListOfAccounts>
                    <xsl:for-each select="$inputVariable.payload/ns0:process/ns0:AccountDetails">
                        <tns:AccountNumber>
                            <xsl:value-of select="ns0:AccountNumber"/>
                        </tns:AccountNumber>
                    </xsl:for-each>
                </tns:ListOfAccounts>
            </tns:HSFFetchParameters>
        </tns:getEntityDataCellsRequest>
    </xsl:template>
    <xsl:template name="GenerateMonths">
        <xsl:param name="timeInString"/>
        <tns:time>
            <xsl:value-of select="concat ('Jan', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Feb', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Mar', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Apr', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('May', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Jun', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Jul', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Aug', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Sep', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Oct', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Nov', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <tns:time>
            <xsl:value-of select="concat ('Dec', substring ($timeInString, 3 ) )"/>
        </tns:time>
        <!--<xsl:for-each select="1 to 12">
      <xsl:choose>
        <xsl:when test="position() = 1">
          <tns:time>
            <xsl:value-of select="concat ('Jan', substring ($timeInString, 3 ) )"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 2">
          <tns:time>
            <xsl:value-of select="concat ('Feb', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 3">
          <tns:time>
            <xsl:value-of select="concat ('Mar', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 4">
          <tns:time>
            <xsl:value-of select="concat ('Apr', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 5">
          <tns:time>
            <xsl:value-of select="concat ('May', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 6">
          <tns:time>
            <xsl:value-of select="concat ('Jun', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 7">
          <tns:time>
            <xsl:value-of select="concat ('Jul', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 8">
          <tns:time>
            <xsl:value-of select="concat ('Aug', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 9">
          <tns:time>
            <xsl:value-of select="concat ('Sep', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 10">
          <tns:time>
            <xsl:value-of select="concat ('Oct', substring ($timeInString, 3 ) )"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 11">
          <tns:time>
            <xsl:value-of select="concat ('Nov', substring ($timeInString, 3 ) )"/>
          </tns:time>
        </xsl:when>
        <xsl:when test="position() = 12">
          <tns:time>
            <xsl:value-of select="concat ('Dec', substring ($timeInString, 3 ))"/>
          </tns:time>
        </xsl:when>
        <xsl:otherwise>
          <tns:time>
            <xsl:value-of select="$timeInString"/>
          </tns:time>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>-->
    </xsl:template>
</xsl:stylesheet>
